Creating a complete chat application in React and Spring Boot is a substantial project that involves multiple components and files. I can provide you with a simplified example to get you started, but please note that you will need to adapt and expand upon this code to create a fully functional chat application.

Let's create a basic chat application with React for the front-end and Spring Boot for the back-end using WebSocket for real-time communication.

Front-end (React):

First, set up a React project if you haven't already:
bash
Copy code
npx create-react-app react-chat-app
cd react-chat-app
Install the necessary dependencies:
bash
Copy code
npm install axios socket.io-client react-bootstrap
Create a simple chat interface with React components. Here's a basic structure for your ChatApp.js component:
jsx
Copy code
import React, { useState, useEffect } from 'react';
import { Button, FormControl, InputGroup } from 'react-bootstrap';
import io from 'socket.io-client';

const ChatApp = () => {
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState([]);
  const [socket, setSocket] = useState(null);

  useEffect(() => {
    const newSocket = io('http://localhost:8080'); // Update with your Spring Boot server address
    setSocket(newSocket);

    newSocket.on('message', (message) => {
      setMessages([...messages, message]);
    });

    return () => {
      newSocket.disconnect();
    };
  }, [messages]);

  const sendMessage = () => {
    if (message.trim() !== '') {
      socket.emit('message', message);
      setMessage('');
    }
  };

  return (
    <div>
      <div className="chat-box">
        {messages.map((msg, index) => (
          <div key={index}>{msg}</div>
        ))}
      </div>
      <InputGroup className="mb-3">
        <FormControl
          placeholder="Type your message..."
          value={message}
          onChange={(e) => setMessage(e.target.value)}
        />
        <InputGroup.Append>
          <Button onClick={sendMessage} variant="primary">
            Send
          </Button>
        </InputGroup.Append>
      </InputGroup>
    </div>
  );
};

export default ChatApp;
This code sets up a basic chat interface that sends and receives messages via WebSocket.

Back-end (Spring Boot):

Set up a Spring Boot project using Spring Initializr with the "WebSocket" dependency.

Create a WebSocket configuration class:

java
Copy code
import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;

@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
        config.enableSimpleBroker("/topic");
        config.setApplicationDestinationPrefixes("/app");
    }

    @Override
    public void registerStompEndpoints(StompEndpointRegistry registry) {
        registry.addEndpoint("/ws-chat").withSockJS();
    }
}
Create a controller to handle WebSocket messages:
java
Copy code
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.stereotype.Controller;

@Controller
public class ChatController {

    @MessageMapping("/message")
    @SendTo("/topic/messages")
    public String sendMessage(String message) {
        return message;
    }
}
This controller listens for messages sent to "/app/message" and broadcasts them to "/topic/messages," which the React client subscribes to.

Start your Spring Boot application on http://localhost:8080.

Start your React application with npm start, which should run on http://localhost:3000.

With these simplified code examples, you'll have a basic chat application running with React and Spring Boot. You can expand upon this foundation by adding user authentication, message history, user profiles, and other features based on your requirements.